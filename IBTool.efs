
var aFPArray = new Array();
function preMain()
{

    setPriceStudy(true);
    setShowTitleParameters(false);
    setShowTitleParameters(false);

    var x=0;
    aFPArray[x] = new FunctionParameter( "UseSpecialFormatting", FunctionParameter.BOOLEAN);
    with( aFPArray[x++] ) {
        setDefault(false);
        setName("Use Special Formatting");
    }
    aFPArray[x] = new FunctionParameter( "IBType", FunctionParameter.STRING);
    with( aFPArray[x++] ) {
        addOption("Today");
        addOption("Mon+Tue");
        setDefault("Today");
    }
    aFPArray[x] = new FunctionParameter("StartTime", FunctionParameter.STRING);
    with( aFPArray[x++] ) {
        setDefault("09:30");
	}
    aFPArray[x] = new FunctionParameter("EndTime", FunctionParameter.STRING);
    with( aFPArray[x++] ) {
        setDefault("10:30");
	}
    aFPArray[x] = new FunctionParameter("Show50", FunctionParameter.BOOLEAN);
    with( aFPArray[x++] ) {
        setDefault(false);
        setName("Show 50%");
    }
    aFPArray[x] = new FunctionParameter("ShowTriple", FunctionParameter.BOOLEAN);
    with( aFPArray[x++] ) {
        setDefault(false);
        setName("Show Triple IB");
    }
    aFPArray[x] = new FunctionParameter("ShowQuadruple", FunctionParameter.BOOLEAN);
    with( aFPArray[x++] ) {
        setDefault(false);
        setName("Show Quadruple IB");
    }
    aFPArray[x] = new FunctionParameter( "colorIB", FunctionParameter.COLOR);
    with( aFPArray[x++] ) {
        setDefault(Color.teal);
        setName("Color IB");
    }
    aFPArray[x] = new FunctionParameter( "thickIB", FunctionParameter.NUMBER);
    with( aFPArray[x++] ) {
        setLowerLimit( 0 );
        setUpperLimit( 20 );
        setDefault(2);
        setName("Thickness IB");
    }
    aFPArray[x] = new FunctionParameter( "styleIB", FunctionParameter.STRING);
    with( aFPArray[x++] ) {
        addOption("PS_SOLID");
        addOption("PS_DOT");
        addOption("PS_DASH");
        addOption("PS_DASHDOT");
        addOption("PS_DASHDOTDOT");
        setDefault( "PS_DOT" );
        setName("Style IB");
    }
    aFPArray[x] = new FunctionParameter( "colorDBL", FunctionParameter.COLOR);
    with( aFPArray[x++] ) {
        setDefault(Color.blue);
        setName("Color Double");
    }
    aFPArray[x] = new FunctionParameter( "thickDBL", FunctionParameter.NUMBER);
    with( aFPArray[x++] ) {
        setLowerLimit( 0 );
        setUpperLimit( 20 );
        setDefault(2);
        setName("Thickness Double");
    }
    aFPArray[x] = new FunctionParameter( "styleDBL", FunctionParameter.STRING);
    with( aFPArray[x++] ) {
        addOption("PS_SOLID");
        addOption("PS_DOT");
        addOption("PS_DASH");
        addOption("PS_DASHDOT");
        addOption("PS_DASHDOTDOT");
        setDefault( "PS_DOT" );
        setName("Style Double");
    }
    aFPArray[x] = new FunctionParameter( "ShowInfoButton", FunctionParameter.BOOLEAN);
    with( aFPArray[x++] ) {
        setDefault(true);
        setName("Show Info Button");
    }
    aFPArray[x] = new FunctionParameter( "ShowLabels", FunctionParameter.BOOLEAN);
    with( aFPArray[x++] ) {
        setDefault(true);
        setName("Show Labels");
    }
    aFPArray[x] = new FunctionParameter( "ButtonBottom", FunctionParameter.NUMBER);
    with( aFPArray[x++] ) {
        setDefault(15);
        setName("Button Bottom");
    }
    aFPArray[x] = new FunctionParameter( "ButtonLeft", FunctionParameter.NUMBER);
    with( aFPArray[x++] ) {
        setDefault(1);
        setName("Button Left");
    }
    aFPArray[x] = new FunctionParameter( "DecPoints", FunctionParameter.NUMBER);
    with( aFPArray[x++] ) {
        setDefault(2);
        setName("Decimal Points");
    }

	_init = true;
	_waiting = true;
}

var _init = true;
var _waiting = true;
var day = 0;
var month = 0;
var year = 0;

var _decPoints = 2;

var startMinute = null;
var endMinute = null;

// ibLabels holds the labels that are shown next to the line and in the cursor window
// The labels are prefixed with T- if IBs pertain to Today or MT- if IBs pertain to Mon+Tue
var ibLabels = null;
// ibArray holds the array of values returned.
var ibArray = null;

var _useSpecialFormatting = false;

var IBColl = null;
var DIBH = null;
var IBH = null;
var IBL = null;
var DIBL = null;
var highP = null;
var lowP = null;

var dayOfWeek = null;

// ibfact is a structure
function ibfact(highP, lowP, date) {
   this.date = date;
   this.highP = highP;
   this.lowP = lowP;
}

function main(
UseSpecialFormatting,
IBType,
StartTime,
EndTime,
Show50, ShowTriple, ShowQuadruple,
colorIB,
thickIB,
styleIB,
colorDBL,
thickDBL,
styleDBL,
ShowInfoButton,
ShowLabels,
ButtonBottom,
ButtonLeft,
DecPoints
)
{

    if (getInterval() == "D")
    {
        return;
    }

    if (getBarState() == BARSTATE_ALLBARS) {

    //the bars are being loaded by the script. This happens when a script is first loaded
        return;
    }

    if(_init)
    {
        _decPoints = DecPoints;

        var timeString = StartTime.split(":");
        var hour = timeString[0];
        var minute = timeString[1];
        startMinute = hour * 60 + minute * 1;

        timeString = EndTime.split(":");
        var hour = timeString[0];
        var minute = timeString[1];
        endMinute = hour * 60 + minute * 1;

        if(UseSpecialFormatting == "true" || UseSpecialFormatting == true) {
            _useSpecialFormatting = true;
        } else {
            _useSpecialFormatting = false;
        }

        highP = lowP = null;

        // Set up all the labels in an array
        var labelPrefix = "MT-";
        if(IBType == "Today") {
            setStudyTitle("IB Tool (Today)");
            labelPrefix = "T-";
        } else {
            setStudyTitle("IB Tool (Mon+Tue)");
        }
        var i = 0;
        ibLabels = new Array();
        if(ShowQuadruple==true || ShowQuadruple=="true") {
            ibLabels[i] = labelPrefix + "QIBH";
            setDefaultBarStyle(eval(styleDBL), i);
            setDefaultBarFgColor(colorDBL, i);
            setDefaultBarThickness(thickDBL, i);
            i++;
        }
        if(ShowTriple==true || ShowTriple=="true") {
            ibLabels[i] = labelPrefix + "TIBH";
            setDefaultBarStyle(eval(styleDBL), i);
            setDefaultBarFgColor(colorDBL, i);
            setDefaultBarThickness(thickDBL, i);
            i++;
        }
        ibLabels[i] = labelPrefix + "DIBH";
        setDefaultBarStyle(eval(styleDBL), i);
        setDefaultBarFgColor(colorDBL, i);
        setDefaultBarThickness(thickDBL, i);
        i++;

        if(Show50==true || Show50=="true") {
            ibLabels[i] = labelPrefix + "HIB50%";
            setDefaultBarStyle(eval(styleIB), i);
            setDefaultBarFgColor(colorIB, i);
            setDefaultBarThickness(thickIB, i);
            i++;
        }

        ibLabels[i] = labelPrefix + "IBH";
        setDefaultBarStyle(eval(styleIB), i);
        setDefaultBarFgColor(colorIB, i);
        setDefaultBarThickness(thickIB, i);
        i++;

        ibLabels[i] = labelPrefix + "IBL";
        setDefaultBarStyle(eval(styleIB), i);
        setDefaultBarFgColor(colorIB, i);
        setDefaultBarThickness(thickIB, i);
        i++;

        if(Show50==true || Show50=="true") {
            ibLabels[i] = labelPrefix + "LIB50%";
            setDefaultBarStyle(eval(styleIB), i);
            setDefaultBarFgColor(colorIB, i);
            setDefaultBarThickness(thickIB, i);
            i++;
        }

        ibLabels[i] = labelPrefix + "DIBL";
        setDefaultBarStyle(eval(styleDBL), i);
        setDefaultBarFgColor(colorDBL, i);
        setDefaultBarThickness(thickDBL, i);
        i++;

        if(ShowTriple==true || ShowTriple=="true") {
            ibLabels[i] = labelPrefix + "TIBL";
            setDefaultBarStyle(eval(styleDBL), i);
            setDefaultBarFgColor(colorDBL, i);
            setDefaultBarThickness(thickDBL, i);
            i++;
        }
        if(ShowQuadruple==true || ShowQuadruple=="true") {
            ibLabels[i] = labelPrefix + "QIBL";
            setDefaultBarStyle(eval(styleDBL), i);
            setDefaultBarFgColor(colorDBL, i);
            setDefaultBarThickness(thickDBL, i);
            i++;
        }

        ibArray = new Array();
        for(i=0; i<ibLabels.length; i++) {
            //debugPrintln("i=" + i + " Label=" + ibLabels[i]);
            setCursorLabelName(ibLabels[i], i);
            setPlotType(PLOTTYPE_FLATLINES, i);
            ibArray[i] = null;
        }

        IBColl = new Array();

        _init = false;
    }
    if(day != getDay(0))
    {
        if(_waiting) // means that we rolled to a new day and didn't close the previous day
        {
            ProcessEndOfTime(IBType, ShowQuadruple, ShowTriple, Show50, ShowLabels);
        }

        day = getDay(0);
        month = getMonth(0);
        year = getYear(0);

        highP = lowP = null;

        var dateObj = getValue("time");
        dayOfWeek = dateObj.getDay();  // Sun=0, Mon=1, Tue=2;

        if(IBType == "Today") {
            NullIBArray();
        } else {
            if(dayOfWeek < 3)
                NullIBArray();
        }
        _waiting = true;
    }
	if(_waiting)
    {
        var nowMinute = getHour(0) * 60 + getMinute(0);

        if(nowMinute >= startMinute && nowMinute < endMinute) {
            // Collect data because we are in time period
            if(highP == null || lowP == null) {
                // Init highP and lowP with current bar's high and low
                highP = high(0);
                lowP = low(0);
            }

            highP = Math.max(high(0), highP);
            lowP = Math.min(low(0), lowP);
        }

        if(nowMinute >= endMinute) {
            ProcessEndOfTime(IBType, ShowQuadruple, ShowTriple, Show50, ShowLabels);
        }
    }

    return ibArray;
}

function ProcessEndOfTime(IBType, ShowQuadruple, ShowTriple, Show50, ShowLabels) {
            if(highP != null && lowP != null) {
                IBH = highP;
                IBL = lowP;
                DIBH = IBH + (IBH - IBL);
                DIBL = IBL - (IBH - IBL);

                var dd = new Date(year, month-1, day);
                IBColl.push(new ibfact(highP, lowP, dd));

                if(IBType == "Today") {
                    SetIBArray(highP, lowP, ShowQuadruple, ShowTriple, Show50);
                    AddLabels(ShowLabels);
                } else { // IBType == "Mon+Tue"
                    if(dayOfWeek < 2) // i.e. Sun or Mon
                        NullIBArray();
                    if(dayOfWeek == 2) {
                        if(IBColl.length < 2) { // Not enough data
                            Alert.addToList("IBTool", "Not enough data for Mon+Tue IBTool", Color.white, Color.red);
                        } else {
                            var len = IBColl.length;
                            var highT, lowT;
                            if(IBColl[len-2].date.getDay() == 1) {
                                highT = Math.max(IBColl[len-2].highP, highP);
                                lowT = Math.min(IBColl[len-2].lowP,  lowP);
                            } else {
                                highT = highP;
                                lowT = lowP;
                            }
                            SetIBArray(highT, lowT, ShowQuadruple, ShowTriple, Show50);
                            AddLabels(ShowLabels);
                        }
                    }
                }
            }
            _waiting = false;
}

function AddLabels(ShowLabels) {
    if (ShowLabels == "true" || ShowLabels == true)
    {
        var sTextFlags, nTextX;
        var sLabelPos = "Right";
        if (sLabelPos == "Right") {
            sTextFlags = "Text.LEFT|Text.ONTOP|Text.VCENTER|Text.Bold|Text.FRAME";
            nTextX = 2;
        } else if (sLabelPos == "RightEdge") {
            sTextFlags = "Text.RIGHT|Text.ONTOP|Text.VCENTER|Text.Bold|Text.FRAME";
            nTextX = 2;
        } else {
            sTextFlags = "Text.RELATIVETOLEFT|Text.ONTOP|Text.VCENTER|Text.Bold|Text.FRAME";
            nTextX = 0;
        }
        for(i=0; i<ibLabels.length; i++) {
            var txtName = ibLabels[i];
            drawTextAbsolute(nTextX, ibArray[i], txtName,
                Color.white, Color.blue, eval(sTextFlags), null, 10, ibLabels[i] + i);
        }
    }
}

function NullIBArray() {
    var i;
    for(i=0; i<ibArray.length; i++) {
        ibArray[i] = null;
    }
    // TODO Clear labels
}

function SetIBArray(highPP, lowPP, ShowQuadruple, ShowTriple, Show50) {
    var IB = highPP - lowPP;
    var i = 0;
    ibArray = new Array();
    if(ShowQuadruple==true || ShowQuadruple=="true")
        ibArray[i++] = highPP + IB * 3;
    if(ShowTriple==true || ShowTriple=="true")
        ibArray[i++] = highPP + IB * 2;
    ibArray[i++] = highPP + IB;
    if(Show50==true || Show50=="true")
        ibArray[i++] = highPP + IB * 0.5;
    ibArray[i++] = highPP;
    ibArray[i++] = lowPP;
    if(Show50==true || Show50=="true")
        ibArray[i++] = lowPP - IB * 0.5;
    ibArray[i++] = lowPP - IB;
    if(ShowTriple==true || ShowTriple=="true")
        ibArray[i++] = lowPP - IB * 2;
    if(ShowQuadruple==true || ShowQuadruple=="true")
        ibArray[i++] = lowPP - IB * 3;
}

var txtMsgString = "";
function BuildString(txtAdd) {
    txtMsgString += txtAdd + "\r\n";
}
function ClearString() {
    txtMsgString = "";
}

// GetFormattedNumber()
// This function formats the parameter to the number of decimal points that have been
// specified in the global parameters or uses eSignals built in format...() function
// if this has been set in the global parameters.
function GetFormattedNumber(numToFormat) {
    if(_useSpecialFormatting) {
        return formatPriceNumber(numToFormat);
    } else {
        return numToFormat.toFixed(_decPoints);
    }
}

function ConstructIBInfo() {
    BuildString(" *** Stats for Initial Balance -> IB *** ");
    BuildString(" For symbol: " + getSymbol());
    BuildString("");

    if(IBColl.length < 1) {
        BuildString("Appears that there is no info here to report. Do you have more than 1 day's data setup in your chart? Have a look at your Time Template.");
        return;
    }

    if(DIBH!=null && DIBL!=null && IBL!=null && IBH!=null) {
        var todayIBSize = IBH - IBL;
        BuildString("Today's IB size: " + GetFormattedNumber(todayIBSize));
        BuildString("DIBH = " + GetFormattedNumber(DIBH));
        BuildString("IBH  = " + GetFormattedNumber(IBH));
        BuildString("IBL  = " + GetFormattedNumber(IBL));
        BuildString("DIBL = " + GetFormattedNumber(DIBL));
        BuildString("");
    }

    BuildString("Historic Data:");
    BuildString("Total Days of Data: " + IBColl.length);
    var minIndex = IBColl.length-1;
    var maxIndex = minIndex;
    var obj = IBColl[minIndex];
    var hP = obj.highP;
    var lP = obj.lowP;
    var maxIB = hP - lP;
    var minIB = maxIB;
    var i;
    var totalIB = 0;

    for(i=IBColl.length-1; i>=0; i--) {
        var currIB = IBColl[i].highP - IBColl[i].lowP;
        if(maxIB < currIB) {
            maxIB = currIB;
            maxIndex = i;
        }
        if(minIB > currIB) {
            minIB = currIB;
            minIndex = i;
        }
        totalIB += currIB;
    }

    var maxIBdate = IBColl[maxIndex].date;
    var minIBdate = IBColl[minIndex].date;

    var minAgo = IBColl.length - (minIndex + 1);
    var maxAgo = IBColl.length - (maxIndex + 1);
    var avgIB = totalIB / IBColl.length;

    BuildString("");
    var printDate = (maxIBdate.getMonth() + 1) + "/" + maxIBdate.getDate() + "/" + maxIBdate.getFullYear();
    BuildString("Largest IB: " + GetFormattedNumber(maxIB) + " on " + printDate + " (" + maxAgo + " trading session(s) ago)");
    printDate = (minIBdate.getMonth() + 1) + "/" + minIBdate.getDate() + "/" + minIBdate.getFullYear();
    BuildString("Smallest IB: " + GetFormattedNumber(minIB) + " on " + printDate + " (" + minAgo + " trading session(s) ago)");
    BuildString("");
    BuildString("Average IB: " + GetFormattedNumber(avgIB));
    BuildString("");
}
