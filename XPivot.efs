
var aFPArray = new Array();
var _init = true;
var _currentDay = 0;
var _highs, _lows, closes;
var pivots;
var curHi, curLo;
var DayOfWeek;
var lineNames = new Array("R4", "R3", "R2", "R1", "PP", "S1", "S2", "S3", "S4");

function preMain() {

    setPriceStudy(true);
    setStudyTitle("XPivot");
    setShowCursorLabel(true);
    setComputeOnClose(true);
    setShowTitleParameters(false);

    var x = 0;
    aFPArray[x] = new FunctionParameter( "Name", FunctionParameter.STRING);
    with( aFPArray[x] ) {
        setDefault("Weekly");
    }
    x++;
    aFPArray[x] = new FunctionParameter("StartDay", FunctionParameter.STRING);
    with( aFPArray[x] ) {
        addOption("Mon");
        addOption("Tue");
        addOption("Wed");
        addOption("Thu");
        addOption("Fri");
        addOption("Sat");
        addOption("Sun");
        setDefault("Fri");
    }
    x++;
    aFPArray[x] = new FunctionParameter("NumDays", FunctionParameter.NUMBER);
    with( aFPArray[x] ) {
        setDefault(5);
        setLowerLimit(1);
    }
    x++;
    aFPArray[x] = new FunctionParameter("rColor", FunctionParameter.COLOR);
    with( aFPArray[x] ) {
        setDefault(Color.red);
        setName("Resistance Color");
    }
    x++;
    aFPArray[x] = new FunctionParameter("rThick", FunctionParameter.NUMBER);
    with( aFPArray[x] ) {
        setLowerLimit( 0 );
        setUpperLimit( 20 );
        setDefault(2);
        setName("Resistance Thickness");
    }
    x++;
    aFPArray[x] = new FunctionParameter( "rStyle", FunctionParameter.STRING);
    with( aFPArray[x] ) {
        addOption("PS_SOLID");
        addOption("PS_DOT");
        addOption("PS_DASH");
        addOption("PS_DASHDOT");
        addOption("PS_DASHDOTDOT");
        setDefault( "PS_DASH" );
        setName("Resistance Style");
    }
    x++;
    aFPArray[x] = new FunctionParameter("pColor", FunctionParameter.COLOR);
    with( aFPArray[x] ) {
        setDefault(Color.blue);
        setName("Pivot Color");
    }
    x++;
    aFPArray[x] = new FunctionParameter("pThick", FunctionParameter.NUMBER);
    with( aFPArray[x] ) {
        setLowerLimit( 0 );
        setUpperLimit( 20 );
        setDefault(2);
        setName("Pivot Thickness");
    }
    x++;
    aFPArray[x] = new FunctionParameter( "pStyle", FunctionParameter.STRING);
    with( aFPArray[x] ) {
        addOption("PS_SOLID");
        addOption("PS_DOT");
        addOption("PS_DASH");
        addOption("PS_DASHDOT");
        addOption("PS_DASHDOTDOT");
        setDefault( "PS_DASH" );
        setName("Pivot Style");
    }
    x++;
    aFPArray[x] = new FunctionParameter("sColor", FunctionParameter.COLOR);
    with( aFPArray[x] ) {
        setDefault(Color.lime);
        setName("Support Color");
    }
    x++;
    aFPArray[x] = new FunctionParameter("sThick", FunctionParameter.NUMBER);
    with( aFPArray[x] ) {
        setLowerLimit( 0 );
        setUpperLimit( 20 );
        setDefault(2);
        setName("Support Thickness");
    }
    x++;
    aFPArray[x] = new FunctionParameter( "sStyle", FunctionParameter.STRING);
    with( aFPArray[x] ) {
        addOption("PS_SOLID");
        addOption("PS_DOT");
        addOption("PS_DASH");
        addOption("PS_DASHDOT");
        addOption("PS_DASHDOTDOT");
        setDefault( "PS_DASH" );
        setName("Support Style");
    }
    x++;

    _init = true;
}


function main(
Name, StartDay, NumDays,
rColor, rThick, rStyle,
pColor, pThick, pStyle,
sColor, sThick, sStyle
) {
    
    if ( getBarState() == BARSTATE_ALLBARS ) {
        return null;
    }
    
	//script only works in intraday time frames
	if ( isDaily() || isWeekly() || isMonthly() ) {
        return;
    }

    if(_init) {
        setStudyTitle(Name + " " + StartDay + " + " + NumDays + " days back");
        _highs = new Array(NumDays);
        _lows = new Array(NumDays);
        _highs = new Array(NumDays);
        
        for(i=0; i<4; i++) {
            setCursorLabelName(lineNames[i], i);
            setDefaultBarStyle(eval(eval(rStyle)), i);
            setDefaultBarThickness(rThick, i);
            setDefaultBarFgColor(rColor, i);
        }
        setCursorLabelName(lineNames[i], i);
        setDefaultBarStyle(eval(eval(pStyle)), i);
        setDefaultBarThickness(pThick, i);
        setDefaultBarFgColor(pColor, i);
        for(i=5; i<9; i++) {
            setCursorLabelName(lineNames[i], i);
            setDefaultBarStyle(eval(eval(sStyle)), i);
            setDefaultBarThickness(sThick, i);
            setDefaultBarFgColor(sColor, i);
        }

        _init = false;
    }
    if(_currentDay != getDay(0)) {
        _highs.unshift(curHi);
        _lows.unshift(curLo);
        _highs.pop();
        _lows.pop();
        if(TriggerDay(StartDay, DayOfWeek)) {
            var tHigh = _highs[0];
            var tLow  = _lows[0];
            for(i=1; i<_highs.length; i++) {
                tHigh = Math.max(_highs[i], tHigh);
                tLow  = Math.min(_lows[i], tLow);
            }
            pivots = GetPivots(tHigh, tLow, close(-1));
        }
        curHi = high(0);
        curLo = low(0);
        DayOfWeek = getValue("time").getDay();
        _currentDay = getDay(0);
    }
    
    curHi = Math.max(curHi, high(0));
    curLo = Math.min(curLo, low(0));
    return pivots;
}

function GetPivots(pHigh, pLow, pClose) {
        var pivot = 0;
        pivot = (pHigh + pLow + pClose) / 3;
        var range = pHigh - pLow;

        // calculate and draw R1, R2, R3, R4
        var r1 = 2 * pivot - pLow;
        var r2 = pivot + range;
        var r3 = pivot + range * 2;
        var r4 = pivot + range * 3;

        // calculate and draw S1, S2, S3, S4
        var s1 = 2 * pivot - pHigh;
        var s2 = pivot - range;
        var s3 = pivot - range * 2;
        var s4 = pivot - range * 3;
        return new Array(r4, r3, r2, r1, pivot, s1, s2, s3, s4);
}

function TriggerDay(StartDay, DayOfWeek) {
    switch(StartDay) {
        case "Mon":
            if(DayOfWeek == 1) { return true; break; }
        case "Tue":
            if(DayOfWeek == 2) { return true; break; }
        case "Wed":
            if(DayOfWeek == 3) { return true; break; }
        case "Thu":
            if(DayOfWeek == 4) { return true; break; }
        case "Fri":
            if(DayOfWeek == 5) { return true; break; }
        case "Sat":
            if(DayOfWeek == 6) { return true; break; }
        case "Sun":
            if(DayOfWeek == 0) { return true; break; }
        default:
            return false;
    }
    return false;
}

